
service: serverless-java

provider:
  name: aws
  runtime: java8
  region: ap-southeast-1
  # needed to not confuse serverless' variable syntax with CFN's
  # see https://serverless.com/framework/docs/providers/aws/guide/variables/#using-custom-variable-syntax
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._\\'\",\\-\\/\\(\\)]+?)}}"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  artifact: target/simplelambdahandler-1.0.0.jar

functions:
  simplelambdahandler:
    handler: org.egov.SimpleLambdaHandler
    events:
      - stream:
          type: kinesis
          arn: { Fn::GetAtt: [ TestKinesisStream, Arn ] }
          batchSize: 100
          startingPosition: TRIM_HORIZON
          # be sure to understand starting position, especially when deploying a new lambda against a pre-existing kinesis stream
resources:
  # Large portions of this borrowed from https://github.com/awslabs/ecs-refarch-cloudformation
  Mappings:

    # These are the latest ECS optimized AMIs as of Jan 2018:
    #
    #   amzn-ami-2017.09.g-amazon-ecs-optimized
    #   ECS agent:    1.16.2
    #   Docker:       17.09.1-ce
    #   ecs-init:     1.16.2-1
    #
    # You can find the latest available on this page of our documentation:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    # (note the AMI identifier is region specific)

    AWSRegionToAMI:
        us-east-2:
            AMI: ami-ce1c36ab
        us-east-1:
            AMI: ami-28456852
        us-west-2:
            AMI: ami-decc7fa6
        us-west-1:
            AMI: ami-74262414
        eu-west-3:
            AMI: ami-9aef59e7
        eu-west-2:
            AMI: ami-67cbd003
        eu-west-1:
            AMI: ami-1d46df64
        eu-central-1:
            AMI: ami-509a053f
        ap-northeast-2:
            AMI: ami-c212b2ac
        ap-northeast-1:
            AMI: ami-872c4ae1
        ap-southeast-2:
            AMI: ami-58bb443a
        ap-southeast-1:
            AMI: ami-910d72ed
        ca-central-1:
            AMI: ami-435bde27
        ap-south-1:
            AMI: ami-00491f6f
        sa-east-1:
            AMI: ami-af521fc3
  Parameters:
      VPCId:
        Type: AWS::EC2::VPC::Id
        Description: VPC ID to deploy into
        Default: vpc-904ae1f7 # Joel's test VPC in ap-southeast-1
      Subnets:
        Type: List<AWS::EC2::Subnet::Id>
        Description: Subnets for ECS hosts and LBs
        Default: "subnet-3b741872, subnet-6bbec20c, subnet-59cfcc1f" # Nat1C
      Ec2InstanceType:
        Type: String
        Description: What type of instance to use as ECS hosts
        Default: t2.large
      ClusterSize:
        Type: Number
        Description: How many ECS hosts to initially spin up
        Default: "3"
  Resources:
    TestKinesisStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: ${{self:service}}-${{opt:stage, 'dev'}}-TestKinesisStream
        ShardCount: 1

    TestRDS:
      Type: "AWS::RDS::DBInstance"
      Properties:
        AllocatedStorage: 20
        #AllowMajorVersionUpgrade: Boolean
        AutoMinorVersionUpgrade: true
        #AvailabilityZone: String
        #BackupRetentionPeriod: String
        #CharacterSetName: String
        #CopyTagsToSnapshot: Boolean
        #DBClusterIdentifier: String
        DBInstanceClass: db.t2.micro
        #DBInstanceIdentifier: String
        DBName: TestRDSDBName
        #DBParameterGroupName: String
        #DBSecurityGroups:
        #  - String
        #DBSnapshotIdentifier: String
        #DBSubnetGroupName: String
        Engine: postgres
        #EngineVersion: 9.6
        #Iops: Number
        #KmsKeyId: String
        #LicenseModel: String

        MasterUsername: ${{ssm:/${{self:service}}/${{opt:stage, 'dev'}}/rds_username}}
        # WARNING: This embeds the password into the template in plain text!
        MasterUserPassword: ${{ssm:/${{self:service}}/${{opt:stage, 'dev'}}/rds_password~true}}
        # TODO: can scope passwords to deployment stage - just need to create them before deploying to that stage
        #MasterUsername: ${ssm:/${self:service}/${opt:stage, 'dev'}/rds_user}
        #MasterUserPassword: ${ssm:/${self:service}/${opt:stage, 'dev'}/rds_password}

        #MonitoringInterval: Integer
        #MonitoringRoleArn: String
        #MultiAZ: Boolean
        #OptionGroupName: String
        #Port: String
        #PreferredBackupWindow: String
        #PreferredMaintenanceWindow: String
        PubliclyAccessible: false
        #SourceDBInstanceIdentifier: String
        #SourceRegion: String
        #StorageEncrypted: Boolean
        #StorageType: String
        #Tags:
        #  Resource Tag
        #Timezone: String
        #VPCSecurityGroups:
        #  - String
    EcsHostSG:
      Type: AWS::EC2::SecurityGroup
      Properties:
        VpcId: {Ref: VPCId}
        GroupDescription: SG for ECS hosts
        SecurityGroupIngress:
          - SourceSecurityGroupId: {Ref: LoadBalancerSG}
            IpProtocol: -1
        Tags:
          - Key: Name
            Value: ${{self:service}}-${{opt:stage, 'dev'}}-ECS-Hosts
    LoadBalancerSG:
      Type: AWS::EC2::SecurityGroup
      Properties:
        VpcId: {Ref: VPCId}
        GroupDescription: SG to sit in front of ECS hosts
        SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1
        Tags:
          - Key: Name
            Value: ${{self:service}}-${{opt:stage, 'dev'}}-ECS-LoadBalancers
    LoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: ${{self:service}}-${{opt:stage, 'dev'}}-ECS-ALB
        Subnets: {Ref: Subnets}
        SecurityGroups:
          - {Ref: LoadBalancerSG}
        Tags:
          - Key: Name
            Value: ${{self:service}}-${{opt:stage, 'dev'}}-ECS-ALB
    LoadBalancerListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        LoadBalancerArn: {Ref: LoadBalancer}
        Port: 80
        Protocol: HTTP
        DefaultActions:
          - Type: forward
            TargetGroupArn: {Ref: DefaultTargetGroup}
    # We define a default target group here, as this is a mandatory Parameters
    # when creating an Application Load Balancer Listener. This is not used, instead
    # a target group is created per-service in each service template (../services/*)
    DefaultTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: ${{self:service}}-${{opt:stage, 'dev'}}-ALBTGrp
        VpcId: {Ref: VPCId}
        Port: 80
        Protocol: HTTP
    ECSCluster:
      Type: AWS::ECS::Cluster
      Properties:
        ClusterName: ${{self:service}}-${{opt:stage, 'dev'}}-ECS-Cluster
    ECSAutoscalingGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        VPCZoneIdentifier: {Ref: Subnets}
        LaunchConfigurationName: {Ref: ECSLaunchConfiguration}
        MinSize: {Ref: ClusterSize}
        MaxSize: {Ref: ClusterSize}
        DesiredCapacity: {Ref: ClusterSize}
        Tags:
          - Key: Name
            Value: ${{self:service}}-${{opt:stage, 'dev'}} ECS Host
            PropagateAtLaunch: true
      CreationPolicy:
        ResourceSignal:
          Count: { Ref: ClusterSize }
          Timeout: PT15M
      UpdatePolicy:
        AutoScalingRollingUpdate:
          MinInstancesInService: 1
          MaxBatchSize: 1
          PauseTime: PT15M
          SuspendProcesses:
            - HealthCheck
            - ReplaceUnhealthy
            - AZRebalance
            - AlarmNotification
            - ScheduledActions
          WaitOnResourceSignals: true
    ECSLaunchConfiguration:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        ImageId:  {Fn::FindInMap: [AWSRegionToAMI, {Ref: "AWS::Region"}, AMI]}
        InstanceType: {Ref: Ec2InstanceType}
        SecurityGroups:
          - {Ref: EcsHostSG}
        IamInstanceProfile: {Ref: ECSInstanceProfile}
        UserData:
                "Fn::Base64":
                  "Fn::Sub": |
                    #!/bin/bash
                    yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
                    yum install -y aws-cfn-bootstrap
                    /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
                    /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoscalingGroup
      Metadata:
        AWS::CloudFormation::Init:
          config:
            packages:
              yum:
                awslogs: []
            commands:
              01_add_instance_to_cluster:
                command: {"Fn::Sub": "echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config"}
            files:
              "/etc/cfn/cfn-hup.conf":
                mode: 000400
                owner: root
                group: root
                content:
                  "Fn::Sub": |
                    [main]
                    stack=${AWS::StackId}
                    region=${AWS::Region}
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                content:
                  "Fn::Sub": |
                    [cfn-auto-reloader-hook]
                    triggers=post.update
                    path=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                    action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
            services:
              "/etc/awslogs/awscli.conf":
                content:
                  "Fn::Sub": |
                    [plugins]
                    cwlogs = cwlogs
                    [default]
                    region = ${AWS::Region}
              "/etc/awslogs/awslogs.conf":
                content:
                  "Fn::Sub": |
                    [general]
                    state_file = /var/lib/awslogs/agent-state
                    [/var/log/dmesg]
                    file = /var/log/dmesg
                    log_group_name = ${ECSCluster}-/var/log/dmesg
                    log_stream_name = ${ECSCluster}
                    [/var/log/messages]
                    file = /var/log/messages
                    log_group_name = ${ECSCluster}-/var/log/messages
                    log_stream_name = ${ECSCluster}
                    datetime_format = %b %d %H:%M:%S
                    [/var/log/docker]
                    file = /var/log/docker
                    log_group_name = ${ECSCluster}-/var/log/docker
                    log_stream_name = ${ECSCluster}
                    datetime_format = %Y-%m-%dT%H:%M:%S.%f
                    [/var/log/ecs/ecs-init.log]
                    file = /var/log/ecs/ecs-init.log.*
                    log_group_name = ${ECSCluster}-/var/log/ecs/ecs-init.log
                    log_stream_name = ${ECSCluster}
                    datetime_format = %Y-%m-%dT%H:%M:%SZ
                    [/var/log/ecs/ecs-agent.log]
                    file = /var/log/ecs/ecs-agent.log.*
                    log_group_name = ${ECSCluster}-/var/log/ecs/ecs-agent.log
                    log_stream_name = ${ECSCluster}
                    datetime_format = %Y-%m-%dT%H:%M:%SZ
                    [/var/log/ecs/audit.log]
                    file = /var/log/ecs/audit.log.*
                    log_group_name = ${ECSCluster}-/var/log/ecs/audit.log
                    log_stream_name = ${ECSCluster}
                    datetime_format = %Y-%m-%dT%H:%M:%SZ
              sysvinit:
                cfn-hup:
                  enabled: true
                  ensureRunning: true
                  files:
                    - /etc/cfn/cfn-hup.conf
                    - /etc/cfn/hooks.d/cfn-auto-reloader.conf
                awslogs:
                  enabled: true
                  ensureRunning: true
                  files:
                    - /etc/awslogs/awslogs.conf
                    - /etc/awslogs/awscli.conf
    # This IAM Role is attached to all of the ECS hosts. It is based on the default role
    # published here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
    #
    # You can add other IAM policy statements here to allow access from your ECS hosts
    # to other AWS services. Please note that this role will be used by ALL containers
    # running on the ECS host.
    # TODO: This is a bit excessive and is only for a POC. Need to separate out permissions
    # used by containers with permissions of hosts, and also constrain hosts to only talk
    # to their own containers

    ECSRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: "${{self:service}}-${{opt:stage, 'dev'}}-ECSRole"
        AssumeRolePolicyDocument: |
          {
            "Statement": [{
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              }
              }]
            }
        Policies:
          - PolicyName: ecs-service
            PolicyDocument: |
              {
                "Statement": [{
                  "Effect": "Allow",
                  "Action": [
                    "ecs:CreateCluster",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Poll",
                    "ecs:RegisterContainerInstance",
                    "ecs:StartTelemetrySession",
                    "ecs:Submit*",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:BatchGetImage",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:GetAuthorizationToken",
                    "ssm:DescribeAssociation",
                    "ssm:GetDeployablePatchSnapshotForInstance",
                    "ssm:GetDocument",
                    "ssm:GetManifest",
                    "ssm:GetParameters",
                    "ssm:ListAssociations",
                    "ssm:ListInstanceAssociations",
                    "ssm:PutInventory",
                    "ssm:PutComplianceItems",
                    "ssm:PutConfigurePackageResult",
                    "ssm:UpdateAssociationStatus",
                    "ssm:UpdateInstanceAssociationStatus",
                    "ssm:UpdateInstanceInformation",
                    "ec2messages:AcknowledgeMessage",
                    "ec2messages:DeleteMessage",
                    "ec2messages:FailMessage",
                    "ec2messages:GetEndpoint",
                    "ec2messages:GetMessages",
                    "ec2messages:SendReply",
                    "cloudwatch:PutMetricData",
                    "ec2:DescribeInstanceStatus",
                    "ds:CreateComputer",
                    "ds:DescribeDirectories",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:AbortMultipartUpload",
                    "s3:ListMultipartUploadParts",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads"
                  ],
                "Resource": "*"
                }]
              }
    ECSInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles:
                - {Ref: ECSRole}

  Outputs:
    TestKinesisStreamARN:
      Description: "ARN for TestKinesisStream"
      Value:
        Fn::GetAtt:
          - TestKinesisStream
          - Arn
    TestRDSEndpointAddress:
      Description: "Endpoint.Address"
      Value: {"Fn::GetAtt": ["TestRDS","Endpoint.Address"]}
    TestRDSEndpointPort:
      Description: "Endpoint.Address"
      Value: {"Fn::GetAtt": ["TestRDS","Endpoint.Port"]}
